{"version":3,"sources":["components/Places.js","App.js","serviceWorker.js","index.js"],"names":["Places","this","getLocation","_this","console","log","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","position","location","lat","JSON","stringify","coords","latitude","lon","longitude","setState","getPlaces","catch","err","error","message","alert","_this2","fetch","concat","process","state","method","headers","Content-Type","response","json","data","results","restaurants","place","Math","floor","random","length","react_default","a","createElement","name","vicinity","rating","user_ratings_total","repeat","price_level","React","Component","App","className","components_Places","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yNAuEeA,8LAnEXC,KAAKC,oDAEO,IAAAC,EAAAF,KAMZG,QAAQC,IAAI,sCAJH,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,KAMnDI,KAAK,SAACC,GACL,IAAIC,EAAW,CACbC,IAAKC,KAAKC,UAAUJ,EAASK,OAAOC,UACpCC,IAAKJ,KAAKC,UAAUJ,EAASK,OAAOG,YAEtClB,EAAKmB,SAAS,CAAER,SAAUA,GAAY,kBACpCX,EAAKoB,cAEPnB,QAAQC,IAAI,gBAEbmB,MAAM,SAACC,GACNrB,QAAQsB,MAAMD,EAAIE,SAClBC,MAAMH,EAAIE,+CAGJ,IAAAE,EAAA5B,KACVG,QAAQC,IAAI,cACZyB,MAAK,oEAAAC,OAAqEC,0CAArE,cAAAD,OAA+G9B,KAAKgC,MAAMnB,SAASC,IAAnI,KAAAgB,OAA0I9B,KAAKgC,MAAMnB,SAASM,IAA9J,gCAAiM,CACpMc,OAAQ,MACRC,QAAS,CACPC,eAAgB,uCAGjBxB,KAAK,SAAAyB,GAAQ,OAAIA,EAASC,SAC1B1B,KAAK,SAAA2B,GACJnC,QAAQC,IAAIkC,EAAKC,SACjBX,EAAKP,SAAS,CACZmB,YAAaF,EAAKC,6CAKxB,IACME,EAAQzC,KAAKgC,OACjBhC,KAAKgC,MAAMQ,aAAexC,KAAKgC,MAAMQ,YACrCE,KAAKC,MAAMD,KAAKE,SAAW5C,KAAKgC,MAAMQ,YAAYK,SAEpD,OAAOC,EAAAC,EAAAC,cAAA,YACHhD,KAAKgC,OAASc,EAAAC,EAAAC,cAAA,qCAChBF,EAAAC,EAAAC,cAAA,WACGP,GAASK,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,UACEP,EAAMQ,MAERH,EAAAC,EAAAC,cAAA,SAAIP,EAAMS,UACVJ,EAAAC,EAAAC,cAAA,qBAAaP,EAAMU,OAAnB,KACAL,EAAAC,EAAAC,cAAA,2BAAmBP,EAAMW,oBACzBN,EAAAC,EAAAC,cAAA,yBAfS,IAeeK,OAAOZ,EAAMa,wBA5D1BC,IAAMC,WCaZC,0LATX,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACW,EAAD,cALUH,cCQEI,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB5D,WACrBA,UAAU6D,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.923666e0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Places extends React.Component {\n  componentDidMount() {\n    this.getLocation();\n  }\n  getLocation() {\n    const getPosition = () => {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      })\n    }\n    console.log('Attempting to get your Location...')\n\n    getPosition()\n      .then((position) => {\n        let location = {\n          lat: JSON.stringify(position.coords.latitude),\n          lon: JSON.stringify(position.coords.longitude)\n        };\n        this.setState({ location: location }, () =>\n          this.getPlaces())\n\n        console.log('location: ')\n      })\n      .catch((err) => {\n        console.error(err.message);\n        alert(err.message);\n      });\n  }\n  getPlaces() {\n    console.log(\"get places\")\n    fetch(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=${process.env.REACT_APP_API_KEY}&location=${this.state.location.lat},${this.state.location.lon}&radius=1000&type=restaurant`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data.results)\n        this.setState({\n          restaurants: data.results\n        })\n      })\n  }\n  render() {\n    const dollar = '$';\n    const place = this.state &&\n      this.state.restaurants && this.state.restaurants[\n      Math.floor(Math.random() * this.state.restaurants.length)\n      ]\n    return <div>\n      {!this.state && <div>loading lunch spots...</div>}\n      <div>\n        {place && <div>\n          <h2>{\n            place.name}\n          </h2>\n          <p>{place.vicinity}</p>\n          <p> rating: {place.rating} </p>\n          <p>total ratings: {place.user_ratings_total}</p>\n          <p>price level: {dollar.repeat(place.price_level)}</p>\n        </div>\n        }\n\n      </div>\n    </div>\n  }\n}\n\nexport default Places;","import React, { Component } from 'react';\nimport Places from './components/Places';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Lunch Roulette </h1>\n        <Places />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}